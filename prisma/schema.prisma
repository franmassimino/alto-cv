datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String?   // Opcional, si el usuario se registra con Google
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relaciones propias de la aplicación
  templates      Template[]
  resumes        Resume[]
  chats          Chat[]

  // Relaciones para NextAuth
  accounts       Account[]
  sessions       Session[]
}

enum TemplateType {
  PREDEFINED
  CUSTOM
}

model Template {
  id          String       @id @default(uuid())
  name        String
  description String
  content     String
  type        TemplateType
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  resumes     Resume[]
}

model Resume {
  id               String         @id @default(uuid())
  title            String
  template         Template?      @relation(fields: [templateId], references: [id])
  templateId       String?
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  // Se marca como @unique para cumplir con la relación one-to-one
  currentVersionId String?        @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  versions         ResumeVersion[]
  // Relación para el acceso rápido a la versión actual
  currentVersion   ResumeVersion? @relation("CurrentVersion", fields: [currentVersionId], references: [id])
  // Relación inversa para los chats asociados al resume
  chats            Chat[]
}

model ResumeVersion {
  id            String   @id @default(uuid())
  resume        Resume   @relation(fields: [resumeId], references: [id])
  resumeId      String
  versionNumber Int
  content       String
  notes         String?
  createdAt     DateTime @default(now())

  // Relación inversa para la versión actual
  asCurrentOf   Resume?  @relation("CurrentVersion")
}

enum MessageSender {
  USER
  AI
}

model Chat {
  id         String   @id @default(uuid())
  // El chat puede estar asociado a un resume en edición (opcional)
  resume     Resume?  @relation(fields: [resumeId], references: [id])
  resumeId   String?
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  messages   ChatMessage[]
  createdAt  DateTime @default(now())
  finishedAt DateTime?
}

model ChatMessage {
  id          String       @id @default(uuid())
  chat        Chat         @relation(fields: [chatId], references: [id])
  chatId      String
  sender      MessageSender
  message     String
  timestamp   DateTime     @default(now())
  type        String?      // Campo opcional para tipos especiales de mensaje
  attachments Attachment[]
}

model Attachment {
  id            String       @id @default(uuid())
  chatMessage   ChatMessage  @relation(fields: [chatMessageId], references: [id])
  chatMessageId String
  fileUrl       String
  fileType      String
  createdAt     DateTime     @default(now())
}

//
// Modelos requeridos por NextAuth
//

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
