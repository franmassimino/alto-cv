generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  chats         Chat[]
  resumes       Resume[]
  sessions      Session[]
  templates     Template[]
  personalData  PersonalData?
}

model Template {
  id          String       @id @default(uuid())
  name        String
  description String
  content     Json          // ✅ JSON con contenido + diseño
  type        TemplateType
  userId      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  resumes     Resume[]
  user        User?        @relation(fields: [userId], references: [id])
}

model Resume {
  id               String          @id @default(uuid())
  title            String
  templateId       String?
  userId           String
  currentVersionId String?         @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  content          Json            // ✅ Incluye diseño embebido
  chats            Chat[]
  currentVersion   ResumeVersion?  @relation("CurrentVersion", fields: [currentVersionId], references: [id])
  template         Template?       @relation(fields: [templateId], references: [id])
  user             User            @relation(fields: [userId], references: [id])
  versions         ResumeVersion[]
}

model ResumeVersion {
  id            String   @id @default(uuid())
  resumeId      String
  versionNumber Int
  content       Json     // ✅ Snapshot del contenido + estilo
  notes         String?
  createdAt     DateTime @default(now())
  asCurrentOf   Resume?  @relation("CurrentVersion")
  resume        Resume   @relation(fields: [resumeId], references: [id])
}

model Chat {
  id         String        @id @default(uuid())
  resumeId   String?
  userId     String
  createdAt  DateTime      @default(now())
  finishedAt DateTime?
  resume     Resume?       @relation(fields: [resumeId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
  messages   ChatMessage[]
}

model ChatMessage {
  id          String        @id @default(uuid())
  chatId      String
  sender      MessageSender
  message     String
  timestamp   DateTime      @default(now())
  type        String?
  attachments Attachment[]
  chat        Chat          @relation(fields: [chatId], references: [id])
}

model Attachment {
  id            String      @id @default(uuid())
  chatMessageId String
  fileUrl       String
  fileType      String
  createdAt     DateTime    @default(now())
  chatMessage   ChatMessage @relation(fields: [chatMessageId], references: [id])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  token      String   @unique
  expires    DateTime
  identified String

  @@unique([identified, token])
}

model PersonalData {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  data      Json     // ✅ Contenido del formulario / IA
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TemplateType {
  PREDEFINED
  CUSTOM
}

enum MessageSender {
  USER
  AI
}
